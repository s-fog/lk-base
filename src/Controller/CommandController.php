<?php

namespace App\Controller;

use App\Entity\User;
use App\Object\EmailVerifyToken;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\NotFoundExceptionInterface;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\StringInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Symfony\Component\Console\Output\NullOutput;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Uid\Uuid;

#[Route('/command')]
class CommandController extends AbstractController
{

    public function __construct(private readonly ContainerBagInterface $params) {}

    public function setContainer(\Psr\Container\ContainerInterface $container): ?\Psr\Container\ContainerInterface
    {
        if (str_contains($this->params->get('app.env'), 'prod')) {
            die();
        }

        return parent::setContainer($container); // TODO: Change the autogenerated stub
    }

    #[Route('/database-reset', methods: 'POST')]
    public function register(Request $request, KernelInterface $kernel): Response
    {
        $application = new Application($kernel);
        $application->setAutoExit(false);

        $application->run(
            new StringInput('doctrine:schema:drop --force'),
            new NullOutput()
        );
        $application->run(
            new StringInput('doctrine:schema:create'),
            new NullOutput()
        );

        return new Response(1);
    }

    #[Route('/create-user', methods: 'POST')]
    public function createUser(Request $request,
                               UserPasswordHasherInterface $userPasswordHasher,
                               EntityManagerInterface $entityManager): Response
    {
        $user = new User();
        $user->setEmail($request->getPayload()->get('email'));
        $user->setPassword(
            $userPasswordHasher->hashPassword(
                $user,
                $request->getPayload()->get('password')
            )
        );

        if ($request->getPayload()->get('verify_code') !== '') {
            $time = null;

            if (str_contains($request->getPayload()->get('verify_code'), '_')) {
                list($code, $time) = explode('_', $request->getPayload()->get('verify_code'));
            } else {
                $code = $request->getPayload()->get('verify_code');
            }

            $user->setEmailVerifyToken(new EmailVerifyToken($code, $time));
        }

        $entityManager->persist($user);
        $entityManager->flush();

        return new Response($user->getId());
    }
}
